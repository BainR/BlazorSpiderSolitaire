@namespace BlazorSpider.Models

    <button class="undoButton" @onclick="@((e) => HandleUndo())">Undo</button>

@code {
    [CascadingParameter] SpiderContainer Container { get; set; }

    async Task HandleUndo()
    {
        if (!Container.MoveList.Any())
        {
            return;
        }

        Move move = Container.MoveList.Last();

        Container.MoveList.RemoveAt(Container.MoveList.Count - 1);

        if (move.ToFoundationPile)
        {
            UndoMoveToFoundation(move);
        }
        else if (move.Cards > 0)
        {
            UndoPlay(move);
        }
        else
        {
            UndoDeal(move);
        }

        await Container.OnPilesUpdated.InvokeAsync(null);
    }

    void UndoMoveToFoundation(Move move)
    {
        if (move.TurnFaceDown)
        {
            Container.TableauPiles[move.FromTableauId - 1].Last().IsFaceDown = true;
        }

        for (int i = 0; i < 13; i++)
        {
            var card = Container.FoundationPiles[move.ToPileId -1][i];
            card.FoundationId = 0;
            card.TableauId = move.FromTableauId;
            card.PileSequence = Container.TableauPiles[move.FromTableauId - 1].Count + 1;
            Container.TableauPiles[move.FromTableauId - 1].Add(card);
        }
        Container.FoundationPiles[move.ToPileId -1].Clear();
    }

    void UndoPlay(Move move)
    {
        var returnToPile = Container.TableauPiles[move.FromTableauId - 1];
        var returnFromPile = Container.TableauPiles[move.ToPileId - 1];
        int returnToPileOffset = returnToPile.Count;
        int returnFromPileOffset = returnFromPile.Count - move.Cards;

        for (int i = 0; i < move.Cards; i++)
        {
            returnToPile.Add(returnFromPile[returnFromPileOffset + i]);
            returnToPile.Last().TableauId = move.FromTableauId;
            returnToPile.Last().PileSequence = returnToPile.Count();
        }
        returnFromPile.RemoveRange(returnFromPileOffset, move.Cards);

        if (move.TurnFaceDown)
        {
            returnToPile[returnToPileOffset - 1].IsFaceDown = true;
        }
    }

    void UndoDeal(Move move)
    {
        int stockId = 5;
        while (Container.StockPiles[stockId - 1].Any())
        {
            stockId--;
        }

        for (int i = 0; i < 10; i++)
        {
            var card = Container.TableauPiles[i].Last();
            card.IsFaceDown = true;
            card.PileSequence = i;
            card.StockId = stockId;
            card.TableauId = 0;
            Container.StockPiles[stockId - 1].Add(card);
            Container.TableauPiles[i].RemoveAt(Container.TableauPiles[i].Count - 1);
        }
    }
}