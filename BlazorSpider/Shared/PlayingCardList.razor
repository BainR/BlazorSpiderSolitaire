@namespace BlazorSpider.Models

@if (PileId > 0)
{
    <div class="play-@PileId dropzone @dropClass" ondragover="event.preventDefault();"
         @ondrop="HandleDrop"
         @ondragenter="HandleDragEnter"
         @ondragleave="HandleDragLeave">
        <div class="spider-column-base @stacksize">
            @foreach (var card in Cards)
            {
                <PlayingCard PlayingCardModel="card" />
            }
        </div>
    </div>
}

@if (DealId > 0 && Cards.Any())
{
    <div class="deal-@DealId">
        <PlayingCard PlayingCardModel="Cards[0]" />
    </div>
}

@if (CompletedId > 0)
{
<div class="completed-@CompletedId dropzone @dropClass" ondragover="event.preventDefault();"
     @ondrop="HandleDropToCompleted">
    @if (Cards.Any())
    {
        <PlayingCard PlayingCardModel="Cards.Last()" />
    }
</div>
}

@code {

    [CascadingParameter] SpiderContainer Container { get; set; }
    [Parameter] public int PileId { get; set; }
    [Parameter] public int DealId { get; set; }
    [Parameter] public int CompletedId { get; set; }
    [Parameter] public List<PlayingCardModel> Cards { get; set; }
    string dropClass = "";
    string stacksize = "small";

    protected override void OnParametersSet()
    {
        if (PileId > 0)
        {
            var tempCardList = Container.PlayingCards[PileId - 1].ToList();
            Cards.Clear();
            Cards.AddRange(tempCardList);

            if (Container.PlayingCards[PileId - 1].Count <= 14)
            {
                stacksize = "small";
            }
            else if (Container.PlayingCards[PileId - 1].Count <= 21)
            {
                stacksize = "medium";
            }
            else
            {
                stacksize = "large";
            }
        }
    }

    private void HandleDragEnter()
    {
        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        if (Container.PlayingCards[PileId - 1].Any())
        {
            if (Container.PlayingCards[PileId - 1].Last().IsFaceDown ||
                Container.PlayingCards[PileId - 1].Last().Value != Container.Payload.Value + 1)
            {
                return;
            }
        }

        for (int i = Container.Payload.PileSequence; i < Container.PlayingCards[Container.Payload.PileId - 1].Count; i++)
        {
            if (Container.PlayingCards[Container.Payload.PileId - 1][i].Suit != Container.PlayingCards[Container.Payload.PileId - 1][i - 1].Suit
                || Container.PlayingCards[Container.Payload.PileId - 1][i].Value != Container.PlayingCards[Container.Payload.PileId - 1][i - 1].Value - 1)
            {
                return;
            }
        }

        await Container.UpdatePileIdAsync(PileId);
    }

    private async Task HandleDropToCompleted()
    {
        if (Container.PlayingCards[CompletedId + 14].Any())
        {
            return;
        }

        if (Container.Payload.IsFaceDown)
        {
            return;
        }

        if (Container.PlayingCards[Container.Payload.PileId - 1].Count != Container.Payload.PileSequence + 12)
        {
            return;
        }

        for (int i = 0; i < 13; i++)
        {
            if (Container.PlayingCards[Container.Payload.PileId - 1][Container.Payload.PileSequence - 1 + i].Value != 13 - i)
            {
                return;
            }
        }

        await Container.UpdateCompletedAsync(CompletedId);
    }
}
