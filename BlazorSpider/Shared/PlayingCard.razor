@namespace BlazorSpider.Models

@if (PlayingCardModel.PileId > 0)
{
    <div id="@PlayingCardModel.Id" class="spider-column sequence-@PlayingCardModel.PileSequence" draggable="true" @ondragstart="@((e) => HandleDragStart(@PlayingCardModel))">
        <img class="playing-card" src="@PlayingCardModel.ImageUrl" alt="@PlayingCardModel.Description" title="@PlayingCardModel.Description" />
    </div>
}

@if (PlayingCardModel.DealId > 0)
{
    <img class="playing-card" src="@PlayingCardModel.ImageUrl" alt="@PlayingCardModel.Description" title="@PlayingCardModel.Description" @onclick="@((e) => HandleClick())" />
}

@if (PlayingCardModel.CompletedId > 0)
{
    <img class="playing-card" src="@PlayingCardModel.ImageUrl" alt="@PlayingCardModel.Description" title="@PlayingCardModel.Description" />
}

@code {
    [CascadingParameter] SpiderContainer Container { get; set; }
    [Parameter] public PlayingCardModel PlayingCardModel { get; set; }

    private void HandleDragStart(PlayingCardModel selectedPlayingCard)
    {
        Container.Payload = selectedPlayingCard;
    }

    private async Task HandleClick()
    {
        if (PlayingCardModel.DealId > 1 && Container.PlayingCards[PlayingCardModel.DealId + 8].Any())
        {
            return;
        }

        for (int i = 0; i < 10; i++)
        {
            if (!Container.PlayingCards[i].Any())
            {
                return;
            }
        }

        Container.MoveList.Add(new Move
        {
            FromPileId = 0,
            ToPileId = 0,
            ToCompletedPile = false,
            Cards = 0
        });

        int dealpileindex = PlayingCardModel.DealId + 9;
        for (int i = 0; i < 10; i++)
        {
            var card = Container.PlayingCards[dealpileindex][i];
            card.DealId = 0;
            card.PileId = i + 1;
            card.IsFaceDown = false;
            card.PileSequence = Container.PlayingCards[i].Any() ? Container.PlayingCards[i].Max(c => c.PileSequence) + 1 : 1;
            Container.PlayingCards[i].Add(card);
        }
        Container.PlayingCards[dealpileindex].Clear();
        await Container.UpdateAllPiles();
    }
}
